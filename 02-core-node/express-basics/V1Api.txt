VERSION ONE API 

exports.aliasRoute = (req, res, next) => {
  req.query.limit = '5';
  req.query.sort = '-ratingsAverage,price';
  req.query.fields =
    'name,duration,maxGroupSize,difficulty,ratingsQuantity,summary';
  next();
};


exports.getAllTours = async (req, res) => {
  try {
    // BUILD THE QUERY
    // 1A) first filtering for beginners
    const queryObj = { ...req.query };
    const excludedFields = ['page', 'sort', 'limit', 'fields'];

    excludedFields.forEach((el) => delete queryObj[el]);

    // const query = Tour.find()
    //   .where('duration')
    //   .equals(5)
    //   .where('price')
    //   .equals(445);

    // 1B) ADVANCED FILTERING FOR ADVANCED LOL

    let queryString = JSON.stringify(queryObj);
    queryString = queryString.replace(
      /\b(gte|gt|lte|lt)\b/g,
      (match) => `$${match}`
    );
    console.log(JSON.parse(queryString));
    let query = Tour.find(JSON.parse(queryString));
    // EXECUTE THE QUERY

    // 2) SORTING THIS IS THE SYNTHAX FOR SORTING
    if (req.query.sort) {
      let sortBy = req.query.sort.split(',').join(' ');
      query = query.sort(sortBy);
    } else query = query.sort('-createdAt');

    // 3) FIELDS LIMITING
    if (req.query.fields) {
      const fields = req.query.fields.split(',').join(' ');
      query = query.select(fields);
    } else {
      query = query.select('-__v'); // this remove the __v from the client interface.. but i also did it in the schema model check out
    }
    //  4) pagination
    const page = req.query.page * 1 || 1;
    const limit = req.query.limit * 1 || 100;
    const skip = (page - 1) * limit;

    query = query.skip(skip).limit(limit);

    if (req.query.page) {
      const numberOfDocuments = await Tour.countDocuments();
      if (skip >= numberOfDocuments)
        throw new Error('This page is not defined');
    }
    const tours = await query;
    // SEND RESPONSE
    res.status(200).json({
      success: true,
      result: tours.length,
      data: {
        tours,
      },
    });
  } catch (error) {
    res.status(404).json({
      success: 'fail',
      message: error.message,
    });
  }
};

exports.getTour = async (req, res) => {
  try {
    const tour = await Tour.findById(req.params.id);
    // Tour.findOne({_id: req.params.id}) another way to do it lol

    res.status(200).json({
      success: true,
      data: {
        tour,
      },
    });
  } catch (error) {
    res.status(404).json({
      success: 'fail',
      message: error.message,
    });
  }

  const tour = tours.find((el) => el.id === id);
};
exports.createTour = async (req, res) => {
  // const newTour = new Tour({})
  // newTour.save()

  try {
    const newTour = await Tour.create(req.body);

    res.status(201).json({
      success: true,
      data: {
        tours: newTour,
      },
    });
  } catch (err) {
    res.status(400).json({
      success: 'fail',
      message: err.message,
    });
  }
};

exports.updateTour = async (req, res) => {
  try {
    const updatedTour = await Tour.findByIdAndUpdate(req.params.id, req.body, {
      new: true,
      runValidators: true,
    });

    res.status(200).json({
      success: true,
      data: {
        updatedTour,
      },
    });
  } catch (error) {
    res.status(404).json({
      success: 'fail',
      message: error,
    });
  }
};

exports.deleteTour = async (req, res) => {
  try {
    await Tour.findByIdAndDelete(req.params.id);
    res.status(200).json({
      success: true,
      data: {
        tour: null,
      },
    });
  } catch (error) {
    res.status(404).json({
      success: 'fail',
      message: error,
    });
  }
};


BEFORE ERROR HANDLING MODIFICATION OF THE TRY BLOCK


const Tour = require('./../MODELS/tourModel');
const APIfeatures = require('./../UTILS/apiFeatures');
// TOURS CONTROLLERS
/*
const tours = JSON.parse(
  fs.readFileSync(`${__dirname}/../../dev-data/data/tours-simple.json`)
);
*/
// FIRST MIDDLE MIDDLEWARES FOR THE TOURS

/*
exports.checkId = (req, res, next, val) => {
  if (req.params.id * 1 > tours.length) {
    return res.status(404).json({
      success: 'fail',
      message: 'no tour found',
    });
  }
  next();
};
*/

// SECOND MIDDLEWARE THAT WAS A CHALLANGE LOL

/*

exports.checkBody = (req, res, next) => {
  const { name, price } = req.body;

  if (!name || !price) {
    return res.status(404).json({
      success: 'fail',
      message: 'no tour found',
    });
  }
  next();
};
*/

exports.aliasRoute = (req, res, next) => {
  req.query.limit = '5';
  req.query.sort = '-ratingsAverage,price';
  req.query.fields =
    'name,duration,maxGroupSize,difficulty,ratingsQuantity,summary';
  next();
};

exports.getAllTours = async (req, res) => {
  try {
    // EXECUTE THE QUERY
    const features = new APIfeatures(Tour.find(), req.query)
      .filter()
      .sort()
      .fieldsLimit()
      .paginate();
    const tours = await features.query;
    // SEND RESPONSE
    res.status(200).json({
      success: true,
      result: tours.length,
      data: {
        tours,
      },
    });
  } catch (error) {
    res.status(404).json({
      success: 'fail',
      message: error.message,
    });
  }
};

exports.getTour = async (req, res) => {
  try {
    const tour = await Tour.findById(req.params.id);
    // Tour.findOne({_id: req.params.id}) another way to do it lol

    res.status(200).json({
      success: true,
      data: {
        tour,
      },
    });
  } catch (error) {
    res.status(404).json({
      success: 'fail',
      message: error.message,
    });
  }

  // const tour = tours.find((el) => el.id === id);
};
exports.createTour = async (req, res) => {
  // const newTour = new Tour({})
  // newTour.save()

  try {
    const newTour = await Tour.create(req.body);

    res.status(201).json({
      success: true,
      data: {
        tours: newTour,
      },
    });
  } catch (err) {
    res.status(400).json({
      success: 'fail',
      message: err.message,
    });
  }
};

exports.updateTour = async (req, res) => {
  try {
    const updatedTour = await Tour.findByIdAndUpdate(req.params.id, req.body, {
      new: true,
      runValidators: true,
    });

    res.status(200).json({
      success: true,
      data: {
        updatedTour,
      },
    });
  } catch (error) {
    res.status(404).json({
      success: 'fail',
      message: error,
    });
  }
};

exports.deleteTour = async (req, res) => {
  try {
    await Tour.findByIdAndDelete(req.params.id);
    res.status(200).json({
      success: true,
      data: {
        tour: null,
      },
    });
  } catch (error) {
    res.status(404).json({
      success: 'fail',
      message: error,
    });
  }
};

exports.getTourStats = async (req, res) => {
  try {
    const stats = await Tour.aggregate([
      {
        $match: { ratingsAverage: { $gte: 4.5 } },
      },
      {
        $group: {
          _id: { $toUpper: '$difficulty' },
          numTours: { $sum: 1 },
          numRatings: { $sum: '$ratingsQuantity' },
          avgRating: { $avg: '$ratingsAverage' },
          avgPrice: { $avg: '$price' },
          minPrice: { $min: '$price' },
          maxPrice: { $max: '$price' },
        },
      },
      {
        $sort: { avgPrice: 1 },
      },
      // {
      //   $match: {_id: {$ne: 'EASY'}}
      // }
    ]);
    res.status(200).json({
      success: true,
      data: {
        stats,
      },
    });
  } catch (error) {
    res.status(404).json({
      success: 'fail',
      message: error,
    });
  }
};

exports.getMonthlyPlan = async (req, res) => {
  try {
    const year = req.params.year * 1; // this give you a number remember... if the params is 2020 it will be 2020 that is to say its a number and not a string

    const plan = await Tour.aggregate([
      {
        $unwind: '$startDates'
      },
      {
        $match: {
          startDates: {
            $gte: new Date(`${year}-01-01`),
            $lte: new Date(`${year}-12-31`)
          }
        }
      },
      {
        $group:{
          _id: {$month: '$startDates'},
          numOfToursStart: {$sum: 1},
          tours: {$push: '$name'}
        }
      },
      {
        $addFields: {month: '$_id'}
      },
      {
        $project: {
        _id: 0
        }
      },
      {
        $sort: {numOfToursStart: -1}
      },
      {
        $limit: 12
      }
    ])




    res.status(200).json({
      success: true,
      data: {
       plan
      },
    });
  } catch (error) {
    res.status(404).json({
      success: 'fail',
      message: error,
    });
  }
};





